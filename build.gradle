import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

buildscript
{
    repositories
    {
         mavenCentral()
         maven
         {
             name = "papermc-repo"
             url = "https://repo.papermc.io/repository/maven-public/"
         }
    }
}

plugins {
    id 'java'
    id "xyz.jpenilla.run-paper" version "2.3.1"
    id "com.gradleup.shadow" version "8.3.0"
    id "io.papermc.paperweight.userdev" version "2.0.0-beta.16"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
    implementation("de.rapha149.signgui:signgui:2.5.0")
}

paperweight
{
    reobfArtifactConfiguration = ReobfArtifactConfiguration.getMOJANG_PRODUCTION()
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        jvmArgs =
        [
            "-Xms2G",
            "-Xms4G",
            "-XX:+AllowEnhancedClassRedefinition",
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+UseStringDeduplication"
        ]
        args = ["nogui"]
        minecraftVersion("1.21.4")
    }
    build
    {
        dependsOn shadowJar
    }
}

jar
{
    enabled = false
}

shadowJar
{
    archiveFileName = "${project.name}-${project.version}.jar"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion)
    {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible())
    {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
