import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

buildscript
{
    repositories
    {
         mavenCentral()
         maven
         {
             name = "papermc-repo"
             url = "https://repo.papermc.io/repository/maven-public/"
         }
    }
}

plugins {
    id 'java'
    id 'idea'
    id "xyz.jpenilla.run-paper" version "2.3.1"
    id "com.gradleup.shadow" version "8.3.0"
    id "io.papermc.paperweight.userdev" version "2.0.0-beta.16"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "spaceio-snapshots"
        url = "https://repo.spaceio.xyz/repository/maven-snapshots/"
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:${minecraft_version}-R0.1-SNAPSHOT"
    paperweight.paperDevBundle "${minecraft_version}-R0.1-SNAPSHOT"
    implementation "de.rapha149.signgui:signgui:2.5.0"
    compileOnly "net.wesjd:anvilgui:2.0.3-SNAPSHOT"
    implementation files("./libs/anvilgui-2.0.3-SNAPSHOT.jar")
}

paperweight
{
    reobfArtifactConfiguration = ReobfArtifactConfiguration.getMOJANG_PRODUCTION()
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        jvmArgs =
        [
            "-Xms2G",
            "-Xms4G",
            "-XX:+AllowEnhancedClassRedefinition", // Comment out if not using JetBrains Runtime for project JDK!
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+UseStringDeduplication"
        ]
        args = ["nogui"]
        minecraftVersion minecraft_version
    }
    build
    {
        dependsOn shadowJar
    }
}

jar
{
    dependsOn shadowJar
    enabled = false
}

shadowJar
{
    archiveFileName = "${project.name}-${project.version}.jar"
    relocate "de.rapha149.signgui", "creeperpookie.libraries.signgui"
    relocate "net.wesjd.anvilgui", "creeperpookie.libraries.anvilgui"
    mergeServiceFiles()
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion)
    {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible())
    {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [name: project.name, version: version, plugin_id: plugin_id]
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
